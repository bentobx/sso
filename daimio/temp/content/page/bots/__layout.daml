<!doctype html> 
<html> 
<head> 
  <meta charset="utf-8">
  <title>SSO Robots</title>
  <script type="text/javascript" src="{@SITE.path}/js/daimio_composite.js"></script>
</head>

{begin js | escape} 

<body style="display:none">
  <h1>SSO Robots</h1>
  
  <div id="bot-list"  data-daimio-template="show-bots" language="daimio">
    <h2>Bots!</h2>
    {begin block | merge data __in}
      <div>
        <p>
          {_name}
          <button class="run" data-value="{_key}">Run</button>
        </p>
        <code>{_code}</code>
      </div>
    {end block}
  </div>
  
  <form id="newbot">
    <p><input type="text" name="name" value="" id="name" placeholder="bot name"></p>
    <textarea name="code" placeholder="put code here" rows=5 cols=80></textarea>
    <p><input type="submit" name="submit" value="Add Bot"></p>
  </form>
  
  <div id="answer-list" data-daimio-template="show-answers" language="daimio">
    <h2>Answers!</h2>
    {begin block | each data __in}
      <div>
        {_value}
      </div>
    {end block}
  </div>
  
  <script type="text/daml" class="spaceseeds">
    outer
      $bots []
    
      @init from-js
      @local-read-in
      @local-read-req
      @local-write
      
      local-shuffle
        { __.key 
        | switch (
            :bots    "{__ | >@bots}"
            :answers "{__ | >@answers}"
          )
        | run with __in.value}
      
      // GET ANSWERS
      
      @init -> {:answers} -> @local-read-req
      @local-read-in -> local-shuffle
      local-shuffle.answers -> {__ | >$answers} -> show-answers
      
      // SHOW ANSWERS
      
      show-answers 
      @answer-list dom-set-html
      show-answers -> @answer-list

      // ADD ANSWER
      answer-add 
        { $answers 
        | poke {__in} 
        | * (:key :answers :value __) }

      answer-add -> @local-write
      answer-add -> {process sleep for 100} -> {:answers} -> @local-read-req
      

      // GET BOTS
      
      @init -> {:bots} -> @local-read-req
      @local-read-in -> local-shuffle
      local-shuffle.bots -> {__ | >$bots} -> show-bots
      
      // ADD BOT

      bot-add 
        { $bots 
        | poke {__in | list remove by_key :submit} 
        | * (:key :bots :value __) }

      @newbot   dom-on-submit
      @newbot -> bot-add -> @local-write
      bot-add -> {process sleep for 100} -> {:bots} -> @local-read-req
    
      // SHOW BOTS
      
      show-bots
      @bot-list dom-set-html
      show-bots -> @bot-list
      
      // RUN BOT
      
      @runbot dom-on-click .run
      @runbot -> {__ | $bots.{__}.code | unquote | run} -> answer-add
      
  </script>


  <script type="text/javascript">

    // ok. so let's make a localstorage thing. we should use downports and dedicated read/write commands, 
    // but instead we'll just fake it with an in/out/out (read-in/read-req/write) until we have downports.
    
    D.import_port_flavour('local-read-in', {
      dir: 'in',
      outside_add: function() {
        // yes, this is super weird, but we're just hacking around the lack of downports.
        D.Etc.local_read_port = this
      }
    })
    
    D.import_port_flavour('local-read-req', {
      dir: 'out',
      outside_exit: function(ship) {
        var result = JSON.parse(localStorage.getItem(ship)) || []
        if(D.Etc.local_read_port)
          D.Etc.local_read_port.enter({key: ship, value: result})
      }
    })
    
    D.import_port_flavour('local-write', {
      dir: 'out',
      outside_exit: function(ship) {
        localStorage.setItem(ship.key, JSON.stringify(ship.value))
      }
    })
    
    
    document.addEventListener('DOMContentLoaded', function() {      
      OuterSpace = D.make_me_a_space_as_fast_as_you_can() // published for debug
      D.send_value_to_js_port(OuterSpace, 'init', 1)
    })
    
    
    /* 
    
    { * (:pq "529cea2caa77c4b20a00000c" :question "Are schools working to support the mental health of youth?" :choices ("Yes" "No") :birthyear 1976  :LGBTQ "Yes"  :ontario "Yes"  :town "Toronto"  :pronoun "he") | >one
    | * (:pq "529cea53aa77c4ba0a00000c" :question "Is media working to support the mental health of youth?" :choices ("Yes" "No") :birthyear 1976  :LGBTQ "Yes"  :ontario "Yes"  :town "Toronto"  :pronoun "he") | >two
    | * (:pq "529cea80aa77c4b10a000007" :question "Are communities working to support the mental health of youth?" :choices ("Yes" "No") :birthyear 1976  :LGBTQ "Yes"  :ontario "Yes"  :town "Toronto"  :pronoun "he") | >three
    | (_one _two _three) }
    
    
    */
    // add time and user id 
    
    // @init -> {:foo} -> @local-read-req
    // @local-read-in -> {__ | * (:key :foo :value {__ | add 1}) | tap} -> @local-write
    
  </script>
  
  {end js}

</body>
</html>