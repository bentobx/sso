<!doctype html> 
<html> 
<head> 
  <meta charset="utf-8">
  <title>SSO Reports</title>
  <script type="text/javascript" src="{@SITE.path}/js/daimio_composite.js"></script>
</head>

<body style="display:none">
  <h1>SSO Reports</h1>

  <div id="reports"></div>


  <script type="text/javascript">
    answers = {study compose_answers id @SSO.study_id}
  </script>
  
  {begin js | escape}  

  <script type="text/daml" class="spaceseeds">
    // GENERAL STUFF //
    outer
      $answers []
      $cron-answers []

      cron-answers {$answers | sort by :time | >$cron-answers}
      
      // @answers-in  from-js
      // @answers-out dom-set-text

      // answers-in -> {__ | >$answers | __.#1} -> @answers-out
      answers-in -> cron-answers
      
  </script>



  <h2>Stuff over time</h2>

    <style>
      .active {color: green;}
    </style>

  <div id="filterbox">
    <p>Filters:</p>
    <div id="dept-filter"></div>
    <div id="position-filter"></div>
    <div id="question-filter"></div>
    <div id="user-filter"></div>
  </div>

  <div>
    Stack:
    <select id="stackpicker">
      <option value="time">Time</option>
      <option value="question">Question</option>
      <option value="user">User</option>
      <option value="position">Position</option>
      <option value="department">Department</option>
    </select>
  </p>

  <p>
    Projection:
    <select id="projpicker">
      <option value="0">Identity average</option>
      <option value="1">Identity sum</option>
      <option value="2">Number of answers</option>
    </select>
  </p>
  
  <div id="sotdraw" data-daimio-template="sotdraw" language="daimio">
    { $answers
    | filter block "{__.depot.dept      | is in $active-depts      | or {$active-depts     | count | not} }"
    | filter block "{__.depot.position  | is in $active-positions  | or {$active-positions | count | not} }"
    | filter block "{__.question        | is in $active-questions  | or {$active-questions | count | not} }"
    | filter block "{__.depot.email     | is in $active-users      | or {$active-users     | count | not} }"
    | group by $stackblock
    | map block $projblock | >$list ||}

    {// THINK: we should only run these filters if needed... and run a set of them? 
     //    | filter block $user-filter
     //  --> if user-filter is empty, filter returns whole input }

    {begin chart | each data { $list | math max | divide value 400 | >multiplier
                            || range 14 | minus 1 
                             | map block "{$list.{__} | times _multiplier}" 
                                   with {* (:multiplier _multiplier)}}}
      <div style="height:20px; width:{_value}px; background-color: hsl({_key | times 27},100%, 50%);"></div>
    {end chart}

  </div>
  

  <div id="stuff-over-time"></div>

  <script type="text/daml" class="spaceseeds">
    outer
      @stuff-over-time dom-set-html        
      @stackpicker dom-on-change
      @projpicker dom-on-change

      sot-setup
        {* (1 :HR 2 :VP 3 :OR 4 :QC) | >$dept-names ||}
        {* (1 :CEO 2 :CTO 3 :CFO 4 :COO 5 :CIO 6 :CCO 7 :CAO 8 :CVO 9 :CDO) | >$position-names ||}
        {$answers.*.depot.dept | unique | >$departments}
        {$answers.*.depot.position | unique | >$positions}
        {$answers.*.question | unique | >$questions}

        { $answers.*.time | >$times 
        | math min | >$mintime | $times
        | math max | >$maxtime 
        | subtract $mintime | >$difftime 
        | divide by 10 | >$chunktime ||}

        {"{__.time | subtract $mintime | divide by {$chunktime | max 0.4} | round}" | >$stackblock} {// derp}

      projset
        {__ | switch (
          0 "{__.*.answer | >$as | ({$as | add} {$as | count}) | divide}"
          1 "{__.*.answer | add}"
          2 "{__.*.answer | count}"
        ) | >$projblock ||}

      stackset
        {__ | switch (
          :time         "{__.time | subtract $mintime | divide by $chunktime | round}"
          :question     "{__.question | list index data $questions}"
          :user         "{__.user | subtract 121}"
          :department   "{__.depot.dept}"
          :position     "{__.depot.position}"
        ) | >$stackblock ||}

      sotdraw

      answers-in -> sot-setup -> {0} -> projset -> sotdraw -> @stuff-over-time
      @stackpicker -> stackset -> sotdraw
      @projpicker -> projset


      // DEPARTMENT FILTER

      @dept-filter dom-set-html
      @dept-link dom-on-click .dept-link

      dept-filter-draw
        Department:
        {begin block | each data $departments}
          <a href="#" class="dept-link {_value | is in $active-depts | then :active}" data-value="{_value}">{$dept-names.{_value}}</a>
        {end block}

      dept-link-handler
        { __ | >$dept-id | is in $active-depts
        | then "{$active-depts | list remove by_value $dept-id}"
          else "{$active-depts | union ($dept-id)}" 
        | run | >$active-depts}

      sot-setup -> dept-filter-draw -> @dept-filter 
      @dept-link -> dept-link-handler -> dept-filter-draw
      dept-link-handler -> sotdraw


      // POSITION FILTER

      @position-filter dom-set-html
      @position-link dom-on-click .position-link

      position-filter-draw
        Position:
        {begin block | each data $positions}
          <a href="#" class="position-link {_value | is in $active-positions | then :active}" data-value="{_value}">{$position-names.{_value}}</a>
        {end block}

      position-link-handler
        { __ | >$position-id | is in $active-positions
        | then "{$active-positions | list remove by_value $position-id}"
          else "{$active-positions | union ($position-id)}" 
        | run | >$active-positions}

      sot-setup -> position-filter-draw -> @position-filter 
      @position-link -> position-link-handler -> position-filter-draw
      position-link-handler -> sotdraw


      // QUESTION FILTER

      @question-filter dom-set-html
      @question-link dom-on-click .question-link

      question-filter-draw
        Question:
        {begin block | each data $questions}
          <a href="#" class="question-link {_value | is in $active-questions | then :active}" data-value="{_value}">{_value | string truncate to 15 add "..."}</a>
        {end block}

      question-link-handler
        { __ | >$question-id | is in $active-questions
        | then "{$active-questions | list remove by_value $question-id}"
          else "{$active-questions | union ($question-id)}" 
        | run | >$active-questions}

      sot-setup -> question-filter-draw -> @question-filter 
      @question-link -> question-link-handler -> question-filter-draw
      question-link-handler -> sotdraw


      // USER FILTER

      @user-filter dom-set-html
      @user-link dom-on-click .user-link

      user-filter-draw
        User: 
        {begin block | each data $users}
          <a href="#" class="user-link {_value | is in $active-users | then :active}" data-value="{_value}">{_value}</a>
        {end block}

      user-link-handler
        { __ | >$user-id | is in $active-users
        | then "{$active-users | list remove by_value $user-id}"
          else "{$active-users | union ($user-id)}" 
        | run | >$active-users}

      sot-setup -> user-filter-draw -> @user-filter 
      @user-link -> user-link-handler -> user-filter-draw
      user-link-handler -> sotdraw
  </script>



  <h2>User scanner</h2>
  <div id="user-range-home" data-daimio-template="user-range-home" language="daimio">
    <input id="user-range" type="range" min="0" max="{$user-range-size}" 
           value="{$user-range-size}" style="width:{$user-range-size}px">
  </div>
  
  <div id="questions_per_user" data-daimio-template="qpudraw" language="daimio">
    { __ | >$current_user 
    | $answers | filter block "{__.user | eq $current_user}" 
    | >my_answers
    | __.#1 | >answer ||}
  
    <p>{_answer.birthyear} -- Birthyear</p>
    <p>{_answer.LGBTQ} -- LGBTQ</p>
    <p>{_answer.ontario} -- Ontario</p>
    <p>{_answer.town} -- Town</p>
    <p>"{_answer.pronoun}" -- Pronoun</p>

    { _my_answers
    | do "<p>{__.choices.{__.answer}} -- {__.question}</p>" }
          
    {_answer.time | time stampwrap | >time ||}
    
    {_time.year}/{_time.month}/{_time.day} {_time.hour}:{_time.minute}:{_time.second}
  </div>
  
  <script type="text/daml" class="spaceseeds">
    outer
      $user-range-size 400
      
      @qpu-out          dom-set-html  questions_per_user
      @user-range       dom-on-change
      @user-range-home  dom-set-html
      
      user-range-home
      qpudraw

      user-range-finder
        { $answers | count | divide by 3
        | times {__in | divide by {$user-range-size | add 1}} 
        | round 
        | times 3
        | >foo
        | $cron-answers.{_foo}.user}
        
      // THINK: why do we need _foo instead of just __ ?

      @init -> user-range-home -> @user-range-home
      @user-range -> user-range-finder -> qpudraw
      cron-answers -> {$cron-answers.#-1.user} -> qpudraw -> @qpu-out
  </script>




  <h2>Q vs A count</h2>
  <div id="bardiv"></div>
  <script type="text/daml" class="spaceseeds">
    outer
      @bardiv dom-set-html
      
      $bar-answers {}

      baragg
        { __ | group by :question
        | map block "{ __ | group by :answer | >ag 
                     | ({_ag.#1 | count} {_ag.#2 | count}) }"
        | >$bar-answers
        }
        
      baradd
        { __ | >ship
        | $bar-answers.{_ship.question}.{_ship.answer}
        | add 1
        | >$bar-answers.{_ship.question}.{_ship.answer}
        }

      bardraw
        {begin qs | each data __in}
          <p>{_key}</p>
          <div style="height:20px; width:{_value.#1}px; background-color:pink">Yes {_value.#1}</div>
          <div style="height:20px; width:{_value.#2}px; background-color:powderblue">No {_value.#2}</div>
        {end qs}

      answers-in -> baragg -> bardraw -> @bardiv
      add-answer -> baradd -> bardraw
  </script>


  <h2>Compact Answers:</h2>
  <div id="compact"></div>
  <script type="text/daml" class="spaceseeds">
    outer
      @compact dom-set-text
      $compact-answers {}

      add-compact-answer
        { __ | >ship
        | cond ( 
            $compact-answers.{_ship.user} "{  _ship.answer  | >$compact-answers.{_ship.user}.#0 }"
            $compact-answers              "{ (_ship.answer) | >$compact-answers.{_ship.user}    }"
            :outherwise                   "{* (_ship.user (_ship.answer)) | >$compact-answers   }"
          )
        | run with {* (:ship _ship)}
        }

      // TODO: make this work: 
      // add-compact-answer {__.answer | >$compact-answers.{__in.user}.#0}

      compact 
        {__ | group by :user | map block "{__.*.answer}" | >$compact-answers}

      answers-in -> compact -> @compact
      add-answer -> add-compact-answer -> @compact
  </script>



  <script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function() {      
      OuterSpace = D.make_me_a_space_as_fast_as_you_can() // published for debug
      
      // var localanswers = JSON.parse(localStorage.getItem('answers'))
      // 
      // D.send_value_to_js_port(OuterSpace, 'answers-in', answers.concat(localanswers))
    })
  </script>
  {end js}


<!--
    // OK SO OK
    // you should do some stuff:
    // - adapt widgets to have an 'add answer' port on their subspace
    // - make a frickin widget builder
    // - and a template thing
    // - and downports
    // - and persistent data structures
    // - and an editor
    // - and a viz editor
-->



  {begin js | escape} 

  <h1>SSO Robots</h1>

  <div id="bot-list" data-daimio-template="show-bots" language="daimio">
    <h2>Bots!</h2>
    <form id="activate-bots">
      {begin block | merge data __in}
        <div>
          <p>
            <label>
              <input type="checkbox" name="active[]" value="{_key}">
              {_name}
            </label>
            <button class="run" data-value="{_key}">Run</button>
            <button class="toggle-code" data-value="{_key}">Show code</button>
          </p>
          <textarea id="code{_key}" style="display:none">{_code}</textarea>
        </div>
      {end block}

      <p>
        <label for="start_date">start date</label>
        <input type="text" name="start_date" value="" id="start_date">
      </p>
      <p>
        <label for="end_date">end date</label>
        <input type="text" name="end_date" value="" id="end_date">
      </p>
      <p>
        <label for="iterations">iterations</label>
        <input type="text" name="iterations" value="" id="iterations">
      </p>
      <p><input type="submit" name="gobots" value="Go bots go!"></p>
    </form>
  </div>

  <form id="newbot">
    <p><input type="text" name="name" value="" id="name" placeholder="bot name"></p>
    <textarea name="code" placeholder="put code here" rows=5 cols=80></textarea>
    <p><input type="submit" name="submit" value="Add Bot"></p>
  </form>

  <form id="clear-answers">
    <p><input type="submit" name="submit" value="Remove all test answers"></p>
  </form>

  <script type="text/daml" class="spaceseeds">
    outer
      $bots []

      @init from-js
      @local-read-in
      @local-read-req
      @local-write

      local-shuffle
        { __.key 
        | switch (
            :bots    "{__ | >@bots}"
            :answers "{__ | >@answers}"
          )
        | run with __in.value}

      // GET ANSWERS
      
      save-answers {__ | >$answers}
      answers-in {__}

      @init -> {:answers} -> @local-read-req
      @local-read-in -> local-shuffle
      local-shuffle.answers -> save-answers -> answers-in

      // GET BOTS

      @init -> {:bots} -> @local-read-req
      local-shuffle.bots -> {__ | >$bots} -> show-bots

      // ADD BOT

      bot-add 
        { $bots 
        | poke {__in | list remove by_key :submit | map block "{__ | string trim}"} 
        | * (:key :bots :value __) }

      @newbot   dom-on-submit
      @newbot -> bot-add -> @local-write
      bot-add -> {__.value} -> show-bots

      // SHOW BOTS

      show-bots
      @bot-list dom-set-html
      show-bots -> @bot-list

      // TOGGLE BOT CODE

      @tweaker    tweak-style
      @togglecode dom-on-click .toggle-code
      @togglecode -> {"code{__}" | run | * (:id __ :attr :display :value :block)} -> @tweaker

      // REMOVE ANSWERS
      
      @clear-answers dom-on-submit
      @clear-answers -> {* (:key :answers :value ())} -> @local-write
      @clear-answers -> {()} -> save-answers


      // RUN LOTS O' BOTS

      bot-runner
        { __ | >form
        | _form.end_date | minus _form.start_date | >diff
        | divide by {_form.iterations | minus 1 | max 1} 
        | round | >step
       || range _form.iterations start 0
        | do "{ _value | times _step | add _start | >time
              | _bot-ids
              | do  "{* (:bot-id __ :time _time) | >@run | wait}"
                with {* (:time _time)} }"
          with {* (:step _step :start _form.start_date :bot-ids _form.active)}
        }

      @activate-bots dom-on-submit
      @activate-bots -> bot-runner
      bot-runner.run -> run-bot
      
      // RUN BOT

      run-bot 
        { __.time | >time
        | __in.bot-id | >id
        | $bots.{_id}.code | string trim | unquote | run
        | * (:answers __ :time _time :user-id {_time | times _time | add {math random max 10000}} )
        }
        
      @runbot dom-on-click .run
      @runbot -> {* ( :bot-id __ :time {time stampwrap | __.stamp} )} -> run-bot -> collect-answers

      // ADD SEVERAL ANSWERS

      collect-answers
        { __.answers 
        | map block "{ _value
                     | poke _user-id path :user 
                     | poke _time path :time}"
              with {* (:user-id __in.user-id :time __in.time)}
        | do "{_value | >@send}"
        }

      collect-answers.send -> add-answer

      // ADD AN ANSWER

      add-answer 
        { __ 
        | >$answers.#0
        | __in}

      add-answer -> {* (:key :answers :value $answers)} -> @local-write
      
  </script>


  <script type="text/javascript">

    // ok. so let's make a localstorage thing. we should use downports and dedicated read/write commands, 
    // but instead we'll just fake it with an in/out/out (read-in/read-req/write) until we have downports.

    D.import_port_flavour('local-read-in', {
      dir: 'in',
      outside_add: function() {
        // yes, this is super weird, but we're just hacking around the lack of downports.
        D.Etc.local_read_port = this
      }
    })

    D.import_port_flavour('local-read-req', {
      dir: 'out',
      outside_exit: function(ship) {
        var result = JSON.parse(localStorage.getItem(ship)) || []
        if(D.Etc.local_read_port)
          D.Etc.local_read_port.enter({key: ship, value: result})
      }
    })

    D.import_port_flavour('local-write', {
      dir: 'out',
      outside_exit: function(ship) {
        localStorage.setItem(ship.key, JSON.stringify(ship.value))
      }
    })

    D.import_port_flavour('tweak-style', {
      dir: 'out',
      outside_exit: function(ship) {
        try {
          var el = document.getElementById(ship.id)
          if(!el) return false

          el.style[ship.attr] = ship.value        
        } catch(e) {}
      }
    })


    document.addEventListener('DOMContentLoaded', function() {      
      D.send_value_to_js_port(OuterSpace, 'init', 1)
    })
  </script>
{end js}



</body>
</html>